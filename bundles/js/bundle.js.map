{"version":3,"sources":["webpack://datawarehouse/./frontend/scripts/UI.js","webpack://datawarehouse/./frontend/scripts/functions.js","webpack://datawarehouse/./frontend/services/CitiesService.js","webpack://datawarehouse/./frontend/services/CompaniesService.js","webpack://datawarehouse/./frontend/services/ContactsService.js","webpack://datawarehouse/./frontend/services/CountriesService.js","webpack://datawarehouse/./frontend/services/LoginService.js","webpack://datawarehouse/./frontend/services/MainService.js","webpack://datawarehouse/./frontend/services/RegionsService.js","webpack://datawarehouse/./frontend/services/UsersService.js","webpack://datawarehouse/webpack/bootstrap","webpack://datawarehouse/webpack/runtime/define property getters","webpack://datawarehouse/webpack/runtime/hasOwnProperty shorthand","webpack://datawarehouse/webpack/runtime/make namespace object","webpack://datawarehouse/./frontend/scripts/app.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAuD;AACA;AACM;AACE;AACJ;AACF;AACM;AACxB;AACvC,UAAU,QAAQ;;AAElB,yBAAyB,8DAAY;AACrC,yBAAyB,8DAAY;AACrC,4BAA4B,iEAAe;AAC3C,2BAA2B,gEAAc;AACzC,6BAA6B,kEAAgB;AAC7C,6BAA6B,kEAAgB;AAC7C,0BAA0B,+DAAa;AACvC,sBAAsB,kDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe,GAAG,kBAAkB,GAAG,sBAAsB,QAAQ,cAAc;AACjG,cAAc,mBAAmB,GAAG,iBAAiB;AACrD,cAAc,eAAe;AAC7B,cAAc,eAAe;AAC7B,cAAc,iBAAiB;AAC/B;AACA,mDAAmD,kBAAkB;AACrE;AACA;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA,6BAA6B,eAAe;;AAE5C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA,YAAY,uBAAuB;AACnC,YAAY,qBAAqB;AACjC,YAAY,uBAAuB;AACnC;AACA,qCAAqC,uBAAuB;AAC5D;AACA;AACA,qCAAqC,uBAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,cAAc,cAAc;AAC5B,cAAc,cAAc;AAC5B,cAAc,eAAe;AAC7B,cAAc,kBAAkB;AAChC,cAAc,mBAAmB;AACjC,cAAc,iBAAiB;AAC/B;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA,8CAA8C,kBAAkB;AAChE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B,cAAc,eAAe;AAC7B,cAAc,cAAc;AAC5B,cAAc,iBAAiB;AAC/B;AACA;AACA,8DAA8D,eAAe;AAC7E;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,E;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA,kCAAkC,iBAAiB;;AAEnD;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA,mCAAmC,mBAAmB;;AAEtD;AACA,KAAK,E;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA,4BAA4B,eAAe;;AAE3C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;;AAEA,iEAAe,EAAE,EAAC;;;;;;;;;;;;;;;;;;AC9mB2C;AAC7D,4BAA4B,iEAAe;;AAE3C;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA,2CAA2C;AAC3C;AACA;AACA,uCAAuC,WAAW;AAClD,6BAA6B,aAAa;;AAE1C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,0CAA0C;;AAE1C;AACA;;AAEA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,S;;;;;;;;;;;;;;;ACjK4B;;AAE3C,wBAAwB,oDAAW;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA,iEAAe,aAAa,E;;;;;;;;;;;;;;;AC/ByB;;AAErD,wBAAwB,6DAAW;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA,iEAAe,gBAAgB,E;;;;;;;;;;;;;;;ACrCsB;;AAErD,wBAAwB,6DAAW;;AAEnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,eAAe,E;;;;;;;;;;;;;;;ACnCuB;;AAErD,wBAAwB,6DAAW;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA,iEAAe,gBAAgB,E;;;;;;;;;;;;;;AC/B/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,wBAAwB;AACxB;AACA;AACA;;AAEA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;ACnB5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,SAAS,GAAG,KAAK;AACjE;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB,oCAAoC;AACpC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gDAAgD,SAAS,GAAG,KAAK;AACjE;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB,gCAAgC;AAChC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,WAAW,E;;;;;;;;;;;;;;;ACjD2B;;AAErD,wBAAwB,6DAAW;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,cAAc,E;;;;;;;;;;;;;;;ACzBc;;AAE3C,wBAAwB,oDAAW;;AAEnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iEAAe,YAAY,E;;;;;;UCpC3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;ACNyB;AACc;;AAEvC,eAAe,2CAAE;AACjB,sBAAsB,kDAAS;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,K;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT,K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,K;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT,K;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,K;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC","file":"js/bundle.js","sourcesContent":["import LoginService from '../services/LoginService.js';\nimport UsersService from '../services/UsersService.js';\nimport ContactsService from '../services/ContactsService.js';\nimport CompaniesService from '../services/CompaniesService.js';\nimport RegionsService from '../services/RegionsService.js';\nimport CitiesService from '../services/CitiesService.js';\nimport CountriesService from '../services/CountriesService.js';\nimport Functions from './functions.js';\n//import { reset } from 'nodemon';\n\nconst loginService = new LoginService();\nconst usersService = new UsersService();\nconst contactsService = new ContactsService();\nconst regionsService = new RegionsService();\nconst countriesService = new CountriesService();\nconst companiesService = new CompaniesService();\nconst citiesService = new CitiesService();\nconst functions = new Functions();\nconst delRegionAlertContainer = document.getElementById(\"del-contact-alert-cont\");\nconst alertContainer = document.getElementById('user-alert-container');\nconst appContainer = document.getElementById('app-container');\nconst contactsBody = document.getElementById('contacts-body');\nconst contactsContainer = document.getElementById('contacts-container');\nconst contactsTable = document.getElementById('contacts-table');\nconst citySelect = document.getElementById('city-select');\nconst countrySelect = document.getElementById('country-select');\nconst deleteItem = document.getElementById('delete-item-alert');\nconst divider = document.getElementById('divider');\nconst editItem = document.getElementById('edit-item-alert');\nconst existingItem = document.getElementById('existing-item-alert');\nconst loginContainer = document.getElementById('login-container');\nconst navTabs = document.getElementById('nav-tabs');\nconst passwdRepeat = document.getElementById('passwd-repeat');\nconst regionSelect = document.getElementById('region-select');\nconst regionAlertContainer = document.querySelectorAll('region-alert-container');\nconst _countriesSelects = document.querySelectorAll('.countries');\nconst _citiesSelects = document.querySelectorAll('.cities');\nconst successItem = document.getElementById('new-item-alert');\nconst tagsContainer = document.getElementById('tags-container');\nconst t_body = document.getElementById('companies-body');\nconst usersBody = document.getElementById('users-body');\nconst userDelAlertCont = document.getElementById('del-user-alert-cont');\nconst userForm = document.getElementById('user-form');\nconst userPasswd = document.getElementById('user-passwd');\nconst usersTable = document.getElementById('users-table');\nconst regionForm = document.getElementById('region-form');\n\nclass UI {//es la clase que interactua con el navegador\n  //LOGIN\n  async userLogin(_data) {\n    const loginUser = await loginService.postLogin(_data);\n\n    if (loginUser.status === 200) {\n      let TOKEN = loginUser.data.accessToken;\n      const API = 'http://localhost:3000';\n\n      sessionStorage. getItem('token') || '[]';\n      sessionStorage.setItem('token', TOKEN);\n      sessionStorage.setItem('API', API);\n      sessionStorage.setItem('user', JSON.stringify(loginUser.data.user));\n    \n      loginContainer.classList.add('d-none');\n      navTabs.style.display = 'inline-block';\n      appContainer.style.display = 'flex';\n\n      //users tab\n      const user = JSON.parse(sessionStorage.getItem('user'));\n      const usersTab = document.getElementById('users-tab');\n\n      if (user.role === 1) {\n        usersTab.classList.remove('d-none');\n      }\n\n      this.renderContacts();\n      \n    //  _regionSelects.forEach( _select => {\n      //  this.renderRegions(_select);\n     // });\n    }\n    if (loginUser.status === 400) {\n      functions.renderMessage(\n        \"Usuario y/o contraseña inválidos!\", \n        \"alert-danger\", \n        document.getElementById('login-form')\n      );\n    }\n  }\n  \n  //CONTACTOS\n  async renderContacts() {\n    contactsBody.innerHTML = '';\n    const _array = await contactsService.getContacts();\n\n    _array.forEach(element => {\n      const _row = document.createElement('tr');\n      _row.className = 'bg-light';\n      _row.innerHTML = `\n        <th scope=\"row\">\n          <input type=\"checkbox\">\n        </th>\n        <td>${element.imgURL} ${element.cont_name} ${element.cont_lastname} <br> ${element.email}</td>\n        <td>${element.count_name}/${element.reg_name}</td>\n        <td>${element.c_name}</td>\n        <td>${element.charge}</td>\n        <td>${element.interest}</td>\n        <td>\n          <button class=\"btn btn-link edit\" _id=\"${element.contactId}\" data-bs-toggle=\"modal\" data-bs-target=\"#contact-modal\" data-bs-whatever=\"edit\" type=\"button\" title=\"modificar\">\n            Modificar\n          </button>\n          <a class=\"btn btn-link\" type=\"button\" title=\"delete\">\n            <i class=\"bi bi-trash text-primary delete\" _id=\"${element.contactId}\"></i>\n          </a>\n        </td>`;\n      contactsBody.appendChild(_row);\n    });\n  }\n\n  closeTags() {\n    divider.classList.add('d-none');\n    divider.classList.remove('d-block');\n    tagsContainer.classList.add('d-none');\n    tagsContainer.classList.remove('d-block');\n  }\n  \n  async filteredResults(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const q = document.getElementById('search-input').value;\n    const _dataContacts = await contactsService.getContacts(q);\n\n    functions.renderContacts(_dataContacts, contactsBody);\n  }\n  async renderSelectCompanies() {\n    const companySelect = document.getElementById('company-select');\n    companySelect.innerHTML = '';\n    const _selected = document.createElement('option');\n    _selected.setAttribute('value', '0');\n    _selected.innerHTML = 'Compañia';\n    \n    companySelect.appendChild(_selected);\n\n    const _list = await companiesService.getCompanies();\n\n    _list.forEach(element => {\n      const _option = document.createElement('option');\n      const companyId = `${element.companyId}`;\n      _option.setAttribute('value', companyId);\n      _option.innerHTML = `${element.c_name}`;\n      \n      companySelect.appendChild(_option);\n    });\n  }\n  addChannelRow(_channelData) {\n    const channelsTBody = document.getElementById('channels-tbody');\n    const _row = document.createElement('tr');\n    _row.id = `${_channelData.channelId}`;\n    _row.className = 'channel-row bg-light';\n    _row.innerHTML = `\n      <td>${_channelData.chan_name}</td>\n      <td>${_channelData.account}</td>\n      <td>${_channelData.pref_name}</td>\n      <td>\n        <button type=\"submit\" _id=\"${_channelData.channelId}\" class=\"btn btn-secondary edit-row\">\n          <i class=\"bi bi-pen\"></i>\n        </button>\n        <button type=\"submit\" _id=\"${_channelData.channelId}\" class=\"btn btn-danger delete-row\">\n          <i class=\"bi bi-trash\"></i>\n        </button>\n      </td>`;\n    channelsTBody.appendChild(_row);\n    //document.getElementById('channel').reset();\n    //document.getElementById('account').reset();\n    //document.getElementById('pref').reset();\n  }\n\n  async renderEditContactModal(contactId) {\n    const _data = await contactsService.getContact(contactId);\n    console.log(_data);\n\n    document.getElementById('contact-lastname').value = _data.cont_lastname;\n    document.getElementById('contact_name').value = _data.cont_name;\n    document.getElementById('charge').value =_data.charge;\n    document.getElementById('contact-email').value =_data.email;\n    document.getElementById('company-select').options.getAttribute('value', _data.companyId);\n    document.getElementById('contact-adress').setAttribute('value', _data.adress);\n    document.getElementById('region-select').options.getAttribute('value', _data.regionId);\n    document.getElementById('country-select').options.getAttribute('innerHTML', _data.count_name);\n    document.getElementById('interest').value =_data.interest;\n  }\n  \n  async sendContact(newContact) {\n    const result = await contactsService.postData(newContact);\n    console.log(result);\n\n    if (result === 200) {\n      functions.renderMessage(\n        \"La el contact ha sido registrado con éxito!\", \n        \"alert-success\",\n        document.getElementById('contact-form')\n      );\n      this.renderContacts();\n    }\n    if (result === 409) {\n      functions.renderMessage(\n        \"El contacto ya existe!\", \n        \"alert-danger\",\n        document.getElementById('contact-form')\n      );\n    }\n    if (result === 400) {\n      functions.renderMessage(\n        \"Error de validacion de datos!\", \n        \"alert-danger\",\n        document.getElementById('contact-form')\n      );\n    };\n  }\n\n  async editContact(contactId, _contact, _channels) {// no esta terminado\n    const result = await contactsService.putData(contactId, _contact, _channels);\n    if (result === 200) {\n      const result = await contactsService.putchannels(contactId, _contact, _channels);//ver como paso a aca los canales\n      if (result === 200) {\n        functions.renderMessage(\n          \"La compañia ha sido modificado con éxito!\", \n          \"alert-success\",\n          document.getElementById('user-form')\n        );\n        this.renderUsersTable();\n      }\n     \n      \n      //this.renderUsersTable();\n    }\n    \n\n    if (result === 200) {\n      functions.renderMessage(\n        \"La compañia ha sido modificado con éxito!\", \n        \"alert-success\",\n        document.getElementById('user-form')\n      );\n      this.renderUsersTable();\n    }\n    if (result === 400) {\n      functions.renderMessage(\n        \"Error de validacion de datos!\", \n        \"alert-danger\",\n        document.getElementById('company-form')\n      );\n    }  \n  }\n  async deleteContact(contactId) {\n    if (confirm('Are you sure to delete this record?')) {\n      const _result = await contactsService.deleteUser(userId);\n      if (_result === 200) {\n        this.renderContacts();\n      }\n    }   \n  }\n//COMPANIAS \n  async renderCompaniesTable() {\n    const _dataTable = await companiesService.getCompanies();\n    t_body.innerHTML = '';\n\n    _dataTable.forEach(element => {\n      const _row = document.createElement('tr');\n      _row.className = 'bg-light';\n      _row.innerHTML = `\n        <td>${element.c_name}</td>\n        <td>${element.email}</td>\n        <td>${element.phone}</td>\n        <td>${element.adress}</td>\n        <td>${element.city_name}</td>\n        <td>${element.count_name}</td>\n        <td>${element.reg_name}</td>\n        <td>\n          <a class=\"btn \"btn-link type=\"button\" title=\"delete\">\n            <i class=\"bi bi-trash text-primary delete\" _id=\"${element.companyId}\"></i>\n          </a>\n          <a class=\"btn btn-link edit\" _id=\"${element.companyId}\" data-bs-toggle=\"modal\" data-bs-target=\"#company-modal\" data-bs-whatever=\"edit\" type=\"button\" title=\"modificar\">\n            Modificar\n          </a>\n        </td>`;\n      t_body.appendChild(_row);\n    });\n  }\n  async renderEditCompanyModal(companyId) {\n    const _data = await companiesService.getData(companyId);\n    const _regionSel = document.getElementById('c-region');\n    const _countrySel = document.getElementById('c-country');\n    const _citySel = document.getElementById('c-city');\n\n    _countrySel.removeAttribute('disabled');\n    _citySel.removeAttribute('disabled');\n\n    _data.forEach ( company => {\n      document.getElementById('company-name').setAttribute('value', company.c_name);\n      document.getElementById('company-email').setAttribute('value', company.email);\n      document.getElementById('company-phone').setAttribute('value', company.phone);\n      //_regionSel.options.item(company.regionId);\n      //_countrySel.value = company.countryId;\n      //_citySel.value = company.cityId;\n      document.getElementById('comp-adress').setAttribute('value', company.adress);\n    })\n  }\n\n  async editCompany(companyId) {\n    const _phone = document.getElementById('company-phone').value;\n    const _name = document.getElementById('company-name').value;\n    const _adress = document.getElementById('comp-adress').value;\n    const _email = document.getElementById('company-email').value;\n    const _city = document.getElementById('c-city').value;\n    const _region = document.getElementById('c-region').value;\n    const _country = document.getElementById('c-country').value;\n\n    var _data = {\n      c_name: _name,\n      email: _email,\n      adress: _adress,\n      phone: _phone,\n      regionId: _region,\n      countryId: _country,\n      cityId: _city\n  };\n\n    const result = await companiesService.putData(companyId, _data);\n\n    if (result === 200) {\n      functions.renderMessage(\n        \"La compañia ha sido modificado con éxito!\", \n        \"alert-success\", \n        document.getElementById('company-modal')\n      );\n      this.renderUsersTable();\n    }\n    if (result === 400) {\n      functions.renderMessage(\n        \"Error de validacion de datos!\", \n        \"alert-danger\",\n        document.getElementById('company-modal')\n      );\n    }\n  }\n  \n  async sendCompany(newCompany) {\n    const result = await companiesService.postData(newCompany);\n\n    if (result === 200) {\n      functions.renderMessage(//no funciona el contenedor!!!!!!!\n        \"La compañia ha sido registrado con éxito!\", \n        \"alert-success\",\n        document.getElementById('after-alert')\n      );\n      \n      this.renderCompaniesTable();\n    }\n    if (result === 409) {\n      functions.renderMessage(\n        \"La compaía ya existe!\", \n        \"alert-danger\",\n        document.getElementById('company-form')\n      );\n    }\n    if (result === 400) {\n      functions.renderMessage(\n        \"Error de validacion de datos!\", \n        \"alert-danger\",\n        document.getElementById('company-form')\n      );\n    };\n  }\n  \n  async deleteCompany(companyId) {\n    if (confirm('Are you sure to delete this record?')) {\n      const _result = await companiesService.deleteData(companyId);\n      if (_result === 200) {\n        this.renderCompaniesTable();\n      }\n    }   \n  }\n  //USUARIOS\n  async renderUsersTable() {\n    usersBody.innerHTML = '';\n    const _dataTable = await usersService.getUsers();\n\n    _dataTable.forEach(element => {\n      const _row = document.createElement('tr');\n      _row.className = 'bg-light';\n      _row.innerHTML = `\n        <td>${element.lastname}</td>\n        <td>${element.u_name}</td>\n        <td>${element.email}</td>\n        <td>${element.rol_name}</td>\n        <td>\n          <a class=\"btn btn-link\" type=\"button\" title=\"delete\">\n            <i class=\"bi bi-trash text-primary delete\" _id=\"${element.userId}\"></i>\n          </a>\n          <a class=\"btn btn-link edit\" _id=\"${element.userId}\" data-bs-toggle=\"modal\" data-bs-target=\"#user-modal\" data-bs-whatever=\"edit\" type=\"button\" title=\"modificar\">\n            Modificar\n          </a>\n        </td>`;\n        usersBody.appendChild(_row);\n    });\n  }\n\n  async sendUser(_user) {//NO TOCAR NADA!\n    console.log(_user);\n    const result = await usersService.postUser(_user);\n    const alertContainer = document.getElementById('user-alert-container');\n\n    if (result === 200) {\n      functions.renderMessage(\"El usuario ha sido registrado con éxito!\", \"alert-success\", alertContainer);\n      userForm.reset();\n      functions.insertRecord(_user, usersBody);\n    }\n    if (result === 409) {\n      functions.renderMessage(\"El usuario ya existe!\", \"alert-danger\", alertContainer);\n      userForm.reset();\n    }\n    if (result === 400) {\n      functions.renderMessage(\"Error de validacion de datos!\", \"alert-danger\", alertContainer);\n    };\n  }\n  async renderEditModal(userId) {\n    const data = await usersService.getUser(userId);\n    data.forEach(element => {\n      document.getElementById('lastname').setAttribute('value', element.lastname);\n      document.getElementById('lastname').setAttribute('disabled', \"\");\n      document.getElementById('u-name').setAttribute('value', element.u_name);\n      document.getElementById('u-name').setAttribute('disabled', \"\");\n      document.getElementById('u-adress').setAttribute('value', element.adress);\n      document.getElementById('u-email').setAttribute('value', element.email);\n      if (element.isAdmin === 0) {\n        document.getElementById('user-value').setAttribute('selected', \"\");\n      }\n      if (element.isAdmin === 1) {\n        document.getElementById('admin-value').setAttribute('selected', \"\");\n      }\n    });  \n  }\n  async editUser(userId) {\n    \n    const _data = functions.getUserData();\n    const result = await usersService.putUser(userId, _data);\n\n    if (result === 200) {\n      functions.renderMessage(\"El usuario ha sido modificado con éxito!\", \"alert-success\", alertContainer);\n      userForm.reset();\n      this.renderUsersTable();\n    }\n    if (result === 400) {\n      functions.renderMessage(\"Error de validacion de datos!\", \"alert-danger\", alertContainer);\n    }\n  }\n  async deleteUser(userId) {\n    if (confirm('Are you sure to delete this record?')) {\n      const _result = await usersService.deleteUser(userId);\n      if (_result === 200) {\n        functions.renderMessage('El usuario ha sido eliminado!', 'alert-danger', userDelAlertCont);\n        this.renderUsersTable();\n      }\n    }   \n  }\n\n  //REGIONS TAB\n  async renderRegions(container) {\n    const _countrySelect = container.parentNode.querySelector('.countries');\n    const _citySelect = container.parentNode.querySelector('.cities');\n\n    container.innerHTML = '';\n    const regionsList = await regionsService.getData();\n\n    regionsList.forEach(element => {\n      const regionOption = document.createElement('option');\n      const regionId = `${element.regionId}`;\n      regionOption.setAttribute('value', regionId);\n      regionOption.innerHTML = `${element.reg_name}`;\n      \n      container.appendChild(regionOption);\n    });\n\n    const firstRegion = regionSelect.firstChild.value;\n    this.renderCountries(firstRegion, countrySelect);\n  }\n\n  async renderCountries(regionId, container) {\n    container.innerHTML = '';\n    const countryList = await countriesService.getData(regionId);\n\n    countryList.forEach(element => {\n      const countryOption = document.createElement('option');\n      const countryId = `${element.countryId}`;\n      countryOption.setAttribute('value', countryId);\n      countryOption.innerText = `${element.count_name}`;\n        \n      container.appendChild(countryOption);\n    }); \n\n    const firstCountry = countrySelect.firstChild.value;\n    this.renderCities(firstCountry, citySelect);\n\n}\n  async renderCities(countryId, container) {\n    container.innerHTML = '';\n    const _cities = await citiesService.getData(countryId);\n \n    _cities.forEach( city => {\n      const option = document.createElement('option');\n      const cityId = `${city.cityId}`;\n      option.setAttribute('value', cityId);\n      option.innerText = `${city.city_name}`;\n        \n      container.appendChild(option);\n    });\n  }\n  renderRegionModal(_place) {\n    const formContainer = document.getElementById('form-container');\n    formContainer.innerHTML = ''\n    const input = document.createElement('input');\n    input.setAttribute('type', 'text');\n    input.setAttribute('placeholder', _place);\n    input.className = 'form-control';\n    formContainer.appendChild(input);\n  }\n\n  async sendRegion(item) {\n    const result = await regionsService.postData(item);\n\n    if (result === 200) {\n      functions.renderMessage(\n        \"El item ha sido registrado con éxito!\", \n        \"alert-success\",\n        regionAlertContainer\n      );\n    }\n    if (result === 409) {\n      functions.renderMessage(\n        \"El item ya existe!\", \n        \"alert-danger\",\n        regionAlertContainer\n      );\n    }\n    regionForm.reset();\n  }\n  async sendCountry(item) {\n    const result = await countriesService.postData(item);\n\n    if (result === 200) {\n      functions.renderMessage(\n        \"El item ha sido registrado con éxito!\", \n        \"alert-success\",\n        regionAlertContainer\n      );\n    }\n    if (result === 409) {\n      functions.renderMessage(\n        \"El item ya existe!\", \n        \"alert-danger\", \n        regionAlertContainer      );\n    }\n  }\n  async sendCity(item) {\n    const result = await citiesService.postData(item);\n\n    if (result === 200) {\n      functions.renderMessage(\n        \"El item ha sido registrado con éxito!\", \n        \"alert-success\",\n        regionAlertContainer      );\n    }\n    if (result === 409) {\n      functions.renderMessage(\n        \"El item ya existe!\", \n        \"alert-danger\",\n        regionAlertContainer      );\n    }\n  }\n  async deleteRegion(regionId) {\n    if (confirm('Are you sure to delete this record?')) {\n      const response = await regionsService.deleteData(regionId);\n      if (response.status === 200) {\n        functions.renderMessage(\n          \"El item ha sido eliminado con éxito!\", \n          \"alert-success\",\n          delRegionAlertContainer\n        );\n      }\n      this.renderRegions(regionSelect);\n    }   \n  }\n\n  async deleteCountry(countryId) {\n    if (confirm('Are you sure to delete this record?')) {\n      const response = await countriesService.deleteData(countryId);\n      if (response.status === 200) {\n        functions.renderMessage(\n          \"El item ha sido eliminado con éxito!\", \n          \"alert-success\",\n          delRegionAlertContainer\n        );\n      }\n      this.renderCountries(countriesSelect);\n    }   \n  }\n  async deleteCity(cityId) {\n    if (confirm('Are you sure to delete this record?')) {\n      const response = await citiesService.deleteData(cityId);\n      if (response.status === 200) {\n        functions.renderMessage(\n          \"El item ha sido eliminado con éxito!\", \n          \"alert-success\",\n          3000, \n          delRegionAlertContainer\n        );\n      }\n      this.renderCities(citiesSelect);\n    }   \n  }\n}\n\nexport default UI;\n\n \n","import ContactsService from '../services/ContactsService.js';\nconst contactsService = new ContactsService();\n\nclass Functions {\n\n \n  renderMessage(message, color, _container) {\n    const alert = document.createElement('span');\n    const text = document.createTextNode(message);\n    alert.className = 'alert align-items-center message ps-5 pe-5';\n    alert.classList.add(color);\n    alert.appendChild(text);\n    const icon = document.createElement('i');\n    alert.insertBefore(icon, text);\n\n    if(color == \"alert-danger\") {\n      icon.className = 'bi bi-exclamation-circle pe-2'\n    }\n    if(color == \"alert-success\") {\n      icon.className = 'bi bi-check-circle pe-2'\n    }\n\n    _container.appendChild(alert);\n    setTimeout(() => {\n      _container.querySelector('.message').remove();\n    }, 2500);\n  }\n\n  renderSelect(list, id, name, container) {//no me toma estos parametros\n    list.forEach(element => {\n      const _option = document.createElement('option');\n      _option.setAttribute('value', `${element.id}`);\n      _option.innerHTML = `${element.name}`;\n      \n      container.appendChild(_option);\n    });\n  }\n  getContactData() {\n    const _comp = document.getElementById('company-select');\n    const _lastname = document.getElementById('contact-lastname').value;\n    const _name = document.getElementById('contact-name').value;\n    const _charge = document.getElementById('charge').value;\n    const _email = document.getElementById('contact-email').value;\n    const _company = _comp.options[_comp.selectedIndex].value;\n    const _region = document.getElementById('contact-region-select').value;\n    const _country = document.getElementById('contact-country-select').value;\n    const _city = document.getElementById('contact-city-select').value;\n    const _adress = document.getElementById('contact-adress').value;\n    const _interest = document.getElementById('interest').value;\n    const _channelsData = document.querySelectorAll('.channel-row');\n    \n    const _channels = [];\n    \n    _channelsData.forEach (_chanrow => {\n        _channels.push({\n            channelId: _chanrow.querySelector('.channel').value,\n            account: _chanrow.querySelector('.account').value,\n            preferenceId: _chanrow.querySelector('.pref').value,\n        });\n    })\n    \n    var _contact = {\n        imgURL: '',\n        cont_name: _name,\n        cont_lastname: _lastname,\n        charge: _charge,\n        email: _email,\n        companyId: _company,\n        adress: _adress,\n        interest: _interest,\n        countryId: _country,\n        regionId: _region,\n        cityId: _city,\n        channels: _channels,\n    };\n    return _contact\n    }\n\n    getCompanyData() {\n      const compRegion = document.getElementById('c-region').value;\n      const compName = document.getElementById('company-name').value;\n      const compEmail = document.getElementById('company-email').value;\n      const compCountry = document.getElementById('c-country').value;\n      const compCity = document.getElementById('c-city').value;\n      const compAdress = document.getElementById('comp-adress').value;\n      const compPhone = document.getElementById('company-phone').value;\n  \n      var newCompany = {\n          c_name: compName,\n          email: compEmail,\n          adress: compAdress,\n          phone: compPhone,\n          regionId: compRegion,\n          countryId: compCountry,\n          cityId: compCity\n      };\n      return newCompany;\n    }\n\n    getUserData() {\n      const _lastname = document.getElementById('lastname').value;\n      const _name = document.getElementById('u-name').value;\n      const _adress = document.getElementById('u-adress').value;\n      const _email = document.getElementById('u-email').value;\n      const _role = document.getElementById('role').value;\n      const _passwd = document.getElementById('user-passwd').value;\n      const _passwdRepeat = document.getElementById('passwd-repeat').value;\n      \n      if(_passwd ===_passwdRepeat) {\n        var _user = {\n            name: _name,\n            lastname: _lastname,\n            adress: _adress,\n            email: _email,\n            role: _role,\n            passwd: _passwd\n        };\n        return _user;\n      } else {\n        this.renderMessage(\n            'Verifique el password', \n            'alert-danger',\n            document.getElementById('user-modal')\n        );\n      }\n    }\n\n    \n  //keyTimer(event, function1, function2){//llamar funciones como callbacks\n    \n    //let _timer = null;\n    //clearTimeout(_timer);\n\n    //if (event.keyCode !== 13) {\n      //_timer = setTimeout(function() { function1 }, 200);\n    //}\n    //else {\n      //function2;\n    //}\n  //}\n  insertRecord(user, _tBody) {\n    const _row = document.createElement('tr');\n    _row.className = 'bg-light';\n    //cambiar EL ROL SE VE COMO  numero\n    _row.innerHTML = `\n      <td>${user.lastname}</td>\n      <td>${user.name}</td>\n      <td>${user.email}</td>\n      <td>${user.role}</td>\n      <td>\n        <a class=\"btn btn-link\" onClick=\"delUser(this)\" type=\"button\" title=\"delete\">\n          <i class=\"bi bi-trash text-primary\"></i>\n        </a>\n        <a class=\" btn btn-link\" onClick=\"delUser(this)\" type=\"button\" title=\"modificar\">\n          Modificar\n        </a>\n      </td>`;\n    _tBody.appendChild(_row);\n  }\n}\n\nexport default Functions","import MainService from './MainService.js';\n\nconst mainService = new MainService();\n\nclass CitiesService {\n    async getData(countryId) {\n        const response = await mainService.httpRequest('cities/countryId/' + countryId, 'GET');\n        const _data = response.data;\n        console.log(_data);\n        return _data;\n    }\n    async postData(item) {\n        const response = await mainService.httpRequest('cities', 'POST', item);\n        const _data = { status: response.status, data: await response.data};\n        console.log(_data);\n        return _data;\n    }\n    async putData(item) {\n        const response = await mainService.httpRequest('cities', 'PUT', item);\n        const _data = { status: response.status, data: await response.data};\n        console.log(_data);\n        return _data;\n    }\n    async deleteData(item) {\n        const response = await mainService.httpRequest('cities', 'DELETE', item);\n        const _data = { status: response.status, data: await response.data};\n        console.log(_data);\n        return _data;\n    }\n}\n\nexport default CitiesService;","import MainService from '../services/MainService.js';\n\nconst mainService = new MainService();\n\nclass CompaniesService {\n    async getCompanies() {\n        const response = await mainService.httpRequest('companies', 'GET');\n        const _data = response.data;\n        console.log(_data);\n        return _data;\n    }\n    async getData(companyId) {\n        const response = await mainService.httpRequest('companies/' + companyId, 'GET');\n        const _data = response.data;\n        console.log(_data);\n        return _data;\n    }\n    async postData(item) {\n        const response = await mainService.httpRequest('companies', 'POST', item);\n        const _data = { status: response.status, data: await response.data};\n        console.log(_data);\n        return _data;\n    }\n    async putData(companyId, companyData) {\n        const response = await mainService.httpRequest('companies/' + companyId, 'PUT', companyData);\n        const _data = { status: response.status, data: await response.data};\n        console.log(_data);\n        return _data;\n    }\n    async deleteData(companyId) {\n        const response = await mainService.httpRequest('companies/' + companyId, 'DELETE');\n        const _data = { status: response.status, data: await response.data};\n        console.log(_data);\n        return _data;\n    }\n}\n\nexport default CompaniesService;","import MainService from '../services/MainService.js';\n\nconst mainService = new MainService();\n\nclass ContactsService {\n\n    async getContacts() {\n        const response = await mainService.httpRequest('contacts', 'GET');\n        const _dataTable = response.data;\n        return _dataTable;\n    }\n    async getContact(contactId) {\n        const response = await mainService.httpRequest('contacts/' + contactId, 'GET');\n        const _data = response.data;\n        return _data;\n    }\n    async postData(newContact) {\n        const response = await mainService.httpRequest('contacts', 'POST', newContact);\n        const _data = { status: response.status, data: await response.json()};\n        console.log(_data);\n        return _data;\n    }\n    async putContact(contactId, _data) {\n        const response = await mainService.httpRequest('contacts/' + contactId, 'PUT', _data);\n        const result = response.status;\n        console.log(result);\n        return result;\n    }\n    async deleteContact(contactId) {\n        const response = await mainService.httpRequest('contacts/' + contactId, 'DELETE');\n        const result = response.status;\n        return result;\n    }\n}\n\nexport default ContactsService;","import MainService from '../services/MainService.js';\n\nconst mainService = new MainService();\n\nclass CountriesService {\n    async getData(regionId) {\n        const response = await mainService.httpRequest('countries/regionId/' + regionId, 'GET');\n        const _data = response.data;\n        console.log(response);\n        return _data;\n    }\n    async postData(newItem) {\n        const response = await mainService.httpRequest('countries', 'POST', newItem);\n        const _data = { status: response.status, data: await response.data};\n        console.log(_data);\n        return _data;\n    }\n    async putData(countryId, _data) {\n        const response = await mainService.httpRequest('countries/' + countryId, 'PUT', _data);\n        const result = { status: response.status, data: await response.data};\n        console.log(result);\n        return result;\n    }\n    async deleteData(countryId) {\n        const response = await mainService.httpRequest('countries/' + countryId, 'DELETE');\n        const _data = { status: response.status, data: await response.data};\n        console.log(_data);\n        return _data;\n    }\n}\n\nexport default CountriesService;","class LoginService {\n\n    constructor() {\n        this.URI = 'http://localhost:3000/';\n    }\n\n    async postLogin(user) {\n        const response = await fetch(this.URI, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(user)\n        });\n        const result = { status: response.status, data: await response.json()};\n        return result;\n    }\n}\n\nexport default LoginService;\n","class MainService {\n    constructor() {\n        this.URI = 'http://localhost:3000';\n    }\n    async httpRequest(_uri, _method, _body) {\n\n        try {\n            const TOKEN = sessionStorage.getItem('token');\n            const method = _method;\n            const body = JSON.stringify(_body);\n            console.log(_uri, method, body);\n\n            if (body == null) {\n                const response = await fetch(`${this.URI}/${_uri}`, {\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'Authorization': 'Bearer ' + TOKEN,\n                        },\n                    method: method,\n                    });\n                    const result = { status: response.status, data: await response.json()};\n                    return result;\n            } else {\n                //if(_uri == 'countries') {\n                  //  const region = _body;\n                    //region.regionId = parseInt(_body.regionId.value, 10);\n                    //body: region;\n                //} else {\n                  //  body: body\n                //}\n                const response = await fetch(`${this.URI}/${_uri}`, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + TOKEN,\n                        },\n                    method: method,\n                    body: body\n                });\n                const result = { status: response.status, data: await response.json()};\n                return result;\n            }\n        } catch (error) {\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            alert(errorCode, errorMessage);\n        }\n    }\n}\n\nexport default MainService;","import MainService from '../services/MainService.js';\n\nconst mainService = new MainService();\n\nclass RegionsService {\n    async getData() {\n        const response = await mainService.httpRequest('regions', 'GET');\n        const _data = response.data;\n        return _data;\n    }\n    async postData(newRegion) {\n        console.log(newRegion);\n        const response = await mainService.httpRequest('regions', 'POST', newRegion);\n        const _data = response.status;\n        console.log(_data);\n        return _data;\n    }\n    async deleteData(regionId) {\n        const response = await mainService.httpRequest('regions/' + regionId, 'DELETE');\n        const _data = response.status;\n        console.log(_data);\n        return _data;\n    }\n}\n\nexport default RegionsService;","import MainService from './MainService.js';\n\nconst mainService = new MainService();\n\nclass UsersService {\n\n    async getUsers() {\n        const response = await mainService.httpRequest('users', 'GET');\n        const _dataTable = response.data;\n        return _dataTable;\n    }\n    async getUser(userId) {\n        const response = await mainService.httpRequest('users/' + userId, 'GET');\n        const _data = response.data;\n        return _data;\n    }\n    async postUser(user) {\n        const response = await mainService.httpRequest('users', 'POST', user);\n        const result = response.status;\n        console.log(result);\n        return result;\n    }\n    async putUser(userId, _data) {\n        const response = await mainService.httpRequest('users/' + userId, 'PUT', _data);\n        const result = response.status;\n        console.log(result);\n        return result;\n    }\n    async deleteUser(userId) {\n        const response = await mainService.httpRequest('users/' + userId, 'DELETE');\n        const result = response.status;\n        return result;\n    }\n\n}\n\nexport default UsersService;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import UI from './UI.js';\nimport Functions from './functions.js';\n\nconst ui = new UI();\nconst functions = new Functions();\n\nconst _home = document.getElementById('home');\nconst _btnLogin = document.getElementById('btn-login');\nconst appContainer = document.getElementById('app-container');\nconst companiesTab = document.getElementById('companies-tab');\nconst contactsTab = document.getElementById('contacts-tab');\nconst contactsTable = document.getElementById('contacts-table');\nconst companiesTable = document.getElementById('companies-table');\nconst companyModal = document.getElementById('company-modal');\nconst deleteCityBtn = document.getElementById('delete-city-btn');\nconst loginContainer = document.getElementById('login-container');\nconst navTabs = document.getElementById('nav.tabs');\nconst regionSelect = document.getElementById('region-select');\nconst submitContactBtn = document.getElementById('submit-contact-btn');\nconst usersTab = document.getElementById('users-tab');\nconst usersTable = document.getElementById('users-table');\nconst userForm = document.getElementById('user-form');\nconst userModal = document.getElementById('user-modal');\nconst regionsTab = document.getElementById('regions-tab');\nconst regionModal = document.getElementById('region-modal');\nconst channelsTable = document.getElementById('channels-table');\nconst countrySelect = document.getElementById('country-select');\nconst citySelect = document.getElementById('city-select');\nconst deleteCountryBtn = document.getElementById('delete-country-btn');\nconst deleteRegionBtn = document.getElementById('delete-region-btn');\nconst addChannelBtn = document.getElementById('add-channel-btn');\nconst contactModal = document.getElementById('contact-modal');\nconst channelsTbody = document.getElementById('channels-tbody');\n\n//HOME\n_home.addEventListener('click', () => {\n    loginContainer.classList = 'd-flex';\n    navTabs.style.display = 'none';\n    appContainer.style.display = 'none';\n});//NO FUNCIONA REDIRIGE A OTRO LADO\n\n// LOGIN//PRINCIPAL\n_btnLogin.addEventListener('click', e => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const _email = document.getElementById('user-email').value;\n    const _passwd = document.getElementById('passwd').value;\n    var _data = {\n        email: _email,\n        passwd: _passwd\n    }\n    \n    try {\n        ui.userLogin(_data);\n    } catch (err) {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        alert(errorCode, errorMessage);\n    }\n});\n\n//CONTACTOS\ncontactsTab.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    ui.renderContacts();\n});\ncontactsTable.addEventListener('click', e => {\n    e.preventDefault();\n    if (e.target.classList.contains('delete')) {\n        console.log('deleted');\n      //  ui.deleteContact(e.target.getAttribute('_id'));\n    }\n    if (e.target.classList.contains('edit')) {\n        console.log('edited');\n        //ui.renderRegions(e.target.getAttribute('_id'));\n    }\n});\n\naddChannelBtn.addEventListener('click', e => {\n    e.preventDefault();\n    const chanSelect = document.getElementById('channel');\n    const prefSelect = document.getElementById('pref');\n    const _channelId = chanSelect.options[chanSelect.selectedIndex].value;\n    const _chanName = chanSelect.options[chanSelect.selectedIndex].innerText;\n    const _account = document.getElementById('account').value;\n    const _prefId = prefSelect.options[prefSelect.selectedIndex].value;\n    const _prefName = prefSelect.options[prefSelect.selectedIndex].innerText;\n\n    const _channelData = {\n        channelId: _channelId,\n        chan_name: _chanName,\n        account: _account,\n        preferenceId: _prefId,\n        pref_name: _prefName\n    };\n\n    ui.addChannelRow(_channelData);\n});\nchannelsTbody.addEventListener('click', e => {\n    e.preventDefault();\n    const _row = e.target.parentNode.parentNode;\n    console.log(_row);\n    if (e.target.classList.contains('delete-row')) {\n        channelsTbody.deleteRow(_row);// NO FUNCIONA!!!!!!!!!!!!\n    }\n});\n\ncontactModal.addEventListener('show.bs.modal', function (e) {\n    const button = e.relatedTarget;\n    const _function = button.getAttribute('data-bs-whatever');\n    const modalTitle = contactModal.querySelector('.modal-title');\n    \n    if (_function == \"edit\") {\n        const contactId = button.getAttribute('_id');\n        modalTitle.textContent = 'Editar contacto';\n        ui.renderEditContactModal(contactId);\n        submitContactBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            ui.editContact(contactId, _contact, _channels);\n        });\n    }\n    if (_function == \"send\") {\n        modalTitle.textContent = 'Nuevo contacto';\n        ui.renderSelectCompanies();\n        submitContactBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n            const newContact = functions.getContactData();\n            ui.sendContact(newContact);\n        });\n    }   \n});\n\n//COMPAÑIAS\ncompaniesTab.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    ui.renderCompaniesTable();\n});\n\ncompanyModal.addEventListener('show.bs.modal', function (e) {\n    const button = e.relatedTarget;\n    const _function = button.getAttribute('data-bs-whatever');\n    const modalTitle = companyModal.querySelector('.modal-title');\n    const submitCompanyBtn = document.getElementById('save-company-btn');\n    const reg_select = companyModal.querySelector('.regions');\n    \n    ui.renderRegions(reg_select);\n\n    if (_function == 'edit') {\n        const companyId = button.getAttribute('_id');\n        modalTitle.textContent = 'Editar compañia';\n        ui.renderEditCompanyModal(companyId);\n        submitCompanyBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            ui.editCompany(companyId);\n        });\n    }   \n    if (_function == 'send') {\n        modalTitle.textContent = 'Nueva Compañia';\n        submitCompanyBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n            const newCompany = functions.getCompanyData();\n            ui.sendCompany(newCompany);\n        });\n    }   \n});\n\ncompaniesTable.addEventListener('click', e => {\n    e.preventDefault();\n    if (e.target.classList.contains('delete')) {\n        console.log(e.target.getAttribute('_id'));\n        ui.deleteCompany(e.target.getAttribute('_id'));\n    }\n});\n\n//USUARIOS\nusersTab.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    ui.renderUsersTable();\n});\n\nuserModal.addEventListener('show.bs.modal', function (e) {\n    const button = e.relatedTarget;\n    const _function = button.getAttribute('data-bs-whatever');\n    const modalTitle = userModal.querySelector('.modal-title');\n    const submitBtn = document.getElementById('submit-btn');\n        \n    if (_function == \"edit\") {\n        const userId = button.getAttribute('_id');\n        modalTitle.textContent = 'Editar usuario';\n        ui.renderEditModal(userId);\n\n        submitBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n \n            ui.editUser(userId);\n        });\n    }   \n    if (_function == \"send\") {\n        modalTitle.textContent = 'Nuevo usuario';\n        submitBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const newUser = functions.getUserData();\n            ui.sendUser(newUser);\n        });\n    }    \n})\n\nusersTable.addEventListener('click', e => {\n    e.preventDefault();\n    if (e.target.classList.contains('delete')) {\n        ui.deleteUser(e.target.getAttribute('_id'));\n    }\n});\n\n//TAB REGIONES\nregionsTab.addEventListener('click', (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    ui.renderRegions(regionSelect);\n});\nregionSelect.addEventListener('change', e => {\n    const selectedRegion = e.target.value;\n    ui.renderCountries(selectedRegion, countrySelect);\n});\ncountrySelect.addEventListener('change', e => {\n    const selectedCountry = e.target.value;\n    ui.renderCities(selectedCountry, citySelect);\n});\ndeleteRegionBtn.addEventListener('click', e =>{\n    e.preventDefault();\n    const selectedRegion = regionSelect.value;\n    ui.deleteRegion(selectedRegion);\n});\ndeleteCountryBtn.addEventListener('click', e =>{\n    e.preventDefault();\n    const selectedCountry = countrySelect.value;\n    ui.deleteCountry(selectedCountry);\n});\ndeleteCityBtn.addEventListener('click', e =>{\n    e.preventDefault();\n    const selectedCity = citySelect.value;\n    ui.deleteCountry(selectedCity);\n});\nregionModal.addEventListener('show.bs.modal', function (e) {\n    const button = e.relatedTarget;\n    const _function = button.getAttribute('data-bs-whatever');\n    const modalTitle = regionModal.querySelector('.modal-title');\n    const _input = document.getElementById('region-form');\n    const submitRegionBtn = document.getElementById('submit-region-btn');\n    \n    if (_function == 'new-region') {\n        modalTitle.textContent = 'Nueva región';\n        ui.renderRegionModal('Agregar región');\n\n        submitRegionBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const newItem = regionModal.querySelector('input').value;\n            var newRegion = { reg_name: newItem }\n            ui.sendRegion(newRegion);\n        });\n    }\n    if (_function == 'new-country') {\n        modalTitle.textContent = 'Nuevo País';\n        ui.renderRegionModal('Agregar país');\n\n        submitRegionBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n            const _regionId = regionSelect.value;\n            const newItem = regionModal.querySelector('input').value;\n            var newCountry = { \n                count_name: newItem,\n                regionId: _regionId\n            }\n            ui.sendCountry(newCountry);\n        });\n    }\n    if (_function == 'new-city') {\n        modalTitle.textContent = 'Nueva ciudad';\n        ui.renderRegionModal('Agregar ciudad');\n\n        submitRegionBtn.addEventListener('click', e => {\n            e.preventDefault();\n            e.stopPropagation();\n            const _regionId = regionSelect.value;\n            const _countryId = countrySelect.value;\n            const newItem = regionModal.querySelector('input').value;\n            var newCity = { \n                city_name: newItem,\n                regionId: _regionId,\n                countryId: _countryId\n            }\n            ui.sendCity(newCity);\n        });\n    }\n});\n\ncitySelect.addEventListener('change', e => {\n    const selectedCity = e.target.value;\n    deleteCityBtn.addEventListener('click', e =>{\n        e.preventDefault();\n        ui.deleteCity(selectedCity);\n    });\n});\n\n\n\n \n"],"sourceRoot":""}